import re
import vk_api
import json
from vk_api.longpoll import VkLongPoll, VkEventType
from random import *
from time import *
import sys
import os
import requests
from jinja2 import Template
import zipfile
import database as db
from config import *


if VK_TOKEN == '':
    print("–¢–æ–∫–µ–Ω –¥–ª—è –æ—Ç –±–æ—Ç–∞ –≤ –í–ö –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –í–ö –≤–µ—Ä—Å–∏—è –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞!")
    exit()
    
vk = vk_api.VkApi(token=VK_TOKEN)

session = vk.get_api()
longpoll = VkLongPoll(vk)
cnt = -1
problem_answers = []
problem_text = []
problem_photos = []
users = {}
message_counter = 0
ver = []
problem = []
admin_commands = ["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º", "Save", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "–û–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                 "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–î–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π"]
module_names = ["–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", "–£—Å–ª–æ–≤–∏—è", "–¶–∏–∫–ª—ã", "–ú–∞—Å—Å–∏–≤—ã", "–§—É–Ω–∫—Ü–∏–∏"]
mod_names_for_sql = ['P', 'U', 'C', 'M', 'F']
prims = [2, 1, 4, 2, 2, 2]
template = Template("""
  <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</title>
</head>
<body>
    <style>
        table {
          border-collapse: collapse;
          width: 75%;
          margin-left: auto;
          margin-right: auto;
        }
        th, td {
          text-align: center;
          padding: 8px;
          border: 1px solid black;
        }
        th {
          background-color: white;
          font-weight: bold;
        }
        p {
          text-align: center;
          font-size: 20;
        }
      </style>
          <p> –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π </p>
          <table>
             <tr>
              <th scope="col", style="background-color: lightgray;">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
              <th scope="col", style="background-color: lightgray;">–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞</th>
              <th scope="col", style="background-color: lightgray;">–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ</th>
              <th scope="col", style="background-color: lightgray;">–£—Å–ª–æ–≤–∏—è</th>
              <th scope="col", style="background-color: lightgray;">–¶–∏–∫–ª—ã</th>
              <th scope="col", style="background-color: lightgray;">–ú–∞—Å—Å–∏–≤—ã</th>
              <th scope="col", style="background-color: lightgray;">–§—É–∫–Ω—Ü–∏–∏</th>
              <th scope="col", style="background-color: lightgray;">–í—Å–µ–≥–æ –±–∞–ª–æ–≤</th>
              <th scope="col", style="background-color: lightgray;">–ú–µ—Å—Ç–æ</th>
            </tr>
            {% for item in my_array %}
            <tr>
              <th scope="col"><span style="color: {{item[9]}};">{{item[0]}}</span></th>
              <th scope="col">{{item[1]}}</th>
              <th scope="col">{{item[2]}}</th>
              <th scope="col">{{item[3]}}</th>
              <th scope="col">{{item[4]}}</th>
              <th scope="col">{{item[5]}}</th>
              <th scope="col">{{item[6]}}</th>
              <th scope="col">{{item[7]}}</th>
              <th scope="col">{{item[8]}}</th>
            </tr>
            {% endfor %}  
        </table>
</body>
</html>

""")

class User:
    def __init__(self, info):
        self.id = int(info['id'])
        self.num = 0
        self.quest = 0
        self.ans = 0
        self.solution_mode = -2
        self.tr = 0
        self.last_time = -1
        self.all_time = -1
        self.skips_count = 0
        self.mistakes_count = 0
        self.answer_choice = False
        self.ind = 0
        self.problem_indexes = [[], [], [], [], []]
        self.rating = 0
        self.old_rating = 0
        self.adminMode = -2
        self.name = info['name']
        self.problem_info = {}
        for i in range(cnt):
            self.problem_indexes[i] = [j for j in range(1, len(problem_answers[i]) + 1)]
            shuffle(self.problem_indexes[i])

    def get_problem(self):
        if self.solution_mode == -1:
            self.quest, self.ans = get_arif_problem(self.num)
            self.ans = str(self.ans)
            if self.num == 0 and self.skips_count + self.mistakes_count == 0:
                self.send_message(f"–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ —è–∑—ã–∫–∞ Python. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ –º–æ–¥—É–ª–µ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.\n\n–í–æ—Ç —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä: {self.quest}", keyInf2)
                return
            self.send_message(self.quest, keyInf2)
        else:
            if self.ind >= len(problem_text[self.solution_mode]):
                self.ind = 0
                shuffle(self.problem_indexes[self.solution_mode])

            self.num = self.problem_indexes[self.solution_mode][self.ind] - 1
            self.ans, self.rating = problem_answers[self.solution_mode][self.num].split(" | ")
            self.rating = int(self.rating)
            if self.ans[0] == '!':
                self.answer_choice = True
                masAns = self.ans.split('!')
                masAns.pop(0)
                self.ans = masAns[0]
                keyInf3 = get_answer_options(masAns)
                self.send_photo(f'‚Ññ{self.num + 1} ({self.rating} ‚òÜ)\n{problem_text[self.solution_mode][self.num]}', problem_photos[self.solution_mode][self.num], keyInf3)
                return
            self.send_photo(f'‚Ññ{self.num + 1} ({self.rating} ‚òÜ)\n{problem_text[self.solution_mode][self.num]}', problem_photos[self.solution_mode][self.num], keyInf2)

    def get_user_answer(self, answer):
        if self.solution_mode == -1:
            if answer == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                self.send_message("–•–æ—Ä–æ—à–æ, –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω")
                self.skips_count += 1
                self.tr = 0
                self.get_problem()
                self.last_time = time()
                return
            answer = answer.replace(',', '.')
            if answer == self.ans:
                self.tr = 0
                self.num += 1
                if self.num in [5, 10, 20, 30, 40, 50]:
                    self.send_message(f"{choice(CORRECTLY)} ‚úÖ, –†–µ—à–µ–Ω–æ —É–∂–µ {self.num} –ø—Ä–∏–º–µ—Ä–æ–≤, {choice(CONGRATULATIONS)}")
                else:
                    self.send_message(f"{choice(CORRECTLY)} ‚úÖ")
                db.update_value(self.id, 'allRating', 1)
                times = time()
                if self.last_time != -1 and times - self.last_time < 120:
                    self.all_time += times - self.last_time
                self.last_time = times
                self.get_problem()
            else:
                if self.tr == 1:
                    ans = f"–°–Ω–æ–≤–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, üòø\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –±—ã–ª–æ: {self.ans}"
                    if self.quest.find("** 0.5") != -1:
                        ans += f"\n'**' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞ –≤ —Å—Ç–µ–ø–µ–Ω—å. –ï—Å–ª–∏ –≤–æ–æ–∑–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤ 0.5 —Å—Ç–µ–ø–µ–Ω—å, —Ç–æ —ç—Ç–æ —Ä–∞–≤–Ω–æ—Å–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è –∏–∑ —á–∏—Å–ª–∞."
                    elif self.quest.find("**") != -1:
                        a, b = self.quest.split(" ** ")
                        b, c = b.split(" = ")
                        ans += f"\n'**' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞ –≤ —Å—Ç–µ–ø–µ–Ω—å. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ–º –º—ã –≤–æ–∑–≤–æ–¥–∏–º —á–∏—Å–ª–æ {a} –≤ {b} —Å—Ç–µ–ø–µ–Ω—å"
                    elif self.quest.find("//") != -1:
                        ans += f"\n'//' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ, —Ç–æ –µ—Å—Ç—å –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å"
                    elif self.quest.find("%") != -1:
                        ans += f"\n'%' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–ª–µ–Ω–∏—è, —Ç–æ –µ—Å—Ç—å –ø–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–µ"
                    elif self.quest.find("abs") != -1:
                        ans += f"\n'abs' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –º–æ–¥—É–ª—å —á–∏—Å–ª–∞, —Ç–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω—è–µ—Ç –∑–Ω–∞–∫ –º–∏–Ω—É—Å–∞ –Ω–∞ –ø–ª—é—Å"
                    elif self.quest.find("round") != -1 and self.quest.find(",") != -1:
                        ans += f"\n'round' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—É–∫–Ω—Ü–∏—é –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —á–∏—Å–ª–∞, –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ –∫–∞–∫–æ–≥–æ –∑–Ω–∞–∫–∞ –Ω–∞–¥–æ –æ–∫—Ä—É–≥–ª—è—Ç—å"
                    elif self.quest.find("round") != -1:
                        ans += f"\n'round' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—É–∫–Ω—Ü–∏—é –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —á–∏—Å–ª–∞, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Ü–µ–ª–æ–≥–æ"
                    self.send_message(ans)
                    self.tr = 0
                    self.mistakes_count += 1
                    self.get_problem()
                    return
                self.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, üòø\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
                self.tr += 1
        else:
            if self.solution_mode == -2:
                if answer in module_names:
                    self.old_rating = db.get_user_attribute(self.id, 'allRating')
                    self.solution_mode = module_names.index(answer)
                    self.ind = 0
                    shuffle(self.problem_indexes[self.solution_mode])
                    self.get_problem()
                else:
                    self.send_message("–¢–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return
                return
            if answer == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                self.tr = 0
                self.send_message("–•–æ—Ä–æ—à–æ, —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                self.ind += 1
                self.answer_choice = False
                self.get_problem()
                return
            answer = answer.replace('&gt;', '>')
            if answer == self.ans and not self.answer_choice:
                db.update_new_values(self.id, [
                    [f'count{mod_names_for_sql[self.solution_mode]}', 1],
                    [f'rating{mod_names_for_sql[self.solution_mode]}', self.rating],
                    ['allRating', self.rating]
                ])
                self.tr = 0

                all_rating = db.get_user_attribute(self.id, 'allRating')
                self.ind += 1
                self.send_message(f"{choice(CORRECTLY)} ‚úÖ\n–†–µ–π—Ç–∏–Ω–≥: {all_rating - self.rating} --> {all_rating}")
                self.get_problem()
                return
            elif self.answer_choice:
                self.answer_choice = False
                if answer == self.ans:
                    db.update_new_values(self.id, [
                        [f'count{mod_names_for_sql[self.solution_mode]}', 1],
                        [f'rating{mod_names_for_sql[self.solution_mode]}', self.rating],
                        ['allRating', self.rating]
                    ])
                    
                    all_rating = db.get_user_attribute(self.id, "allRating")
                    self.ind += 1
                    self.send_message(f"{choice(CORRECTLY)} ‚úÖ\n–†–µ–π—Ç–∏–Ω–≥: {all_rating - self.rating} --> {all_rating}")
                    self.get_problem()
                    return
                self.send_message(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå, —Ç—ã —Å–º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é –ø–æ–∑–∂–µ")
                self.tr = 0
                self.ind += 1
                self.get_problem()
            else:
                self.tr += 1
                if self.tr == 1:
                    self.send_message(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
                else:
                    self.send_message(f"–°–Ω–æ–≤–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå, —Ç—ã —Å–º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é –ø–æ–∑–∂–µ")
                    self.tr = 0
                    self.ind += 1
                    self.get_problem()

    def Stop(self):
        if self.adminMode == 100:
            self.send_message("–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É", keyAdmin)
            self.adminMode = -1
            return
        if self.adminMode == -1:
            self.send_message("–•–æ—Ä–æ—à–æ", keyMainForAdmin)
            self.adminMode = -2
            return
        if self.adminMode == 0:
            self.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", keyMainForAdmin)
            self.adminMode = -1
            return
        if self.solution_mode == -1:
            db.update_value(self.id, 'countArif', self.num)
            if self.num == 0:
                self.send_message("–£–≤—ã, –Ω–µ —Ä–µ—à–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ :(", keyMain2)
            elif self.num == 1:
                all_rating = db.get_user_attribute(self.id, 'allRating')
                self.send_message(f"–í —ç—Ç–æ—Ç —Ä–∞–∑ —Ä–µ—à–µ–Ω–æ {self.num} {get_word('–ø—Ä–∏–º–µ—Ä', self.num)}.\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - {self.mistakes_count} {get_word('–ø—Ä–∏–º–µ—Ä', self.mistakes_count)}.\n–ü—Ä–æ–ø—É—â–µ–Ω–æ - {self.skips_count} {get_word('–ø—Ä–∏–º–µ—Ä', self.skips_count)}.\n\n–†–µ–π—Ç–∏–Ω–≥: {all_rating - self.num} --> {all_rating}\n–ú–µ—Å—Ç–æ: {self.get_position_in_top()}", keyMain2)
            else:
                srTime = abs(round(self.all_time / self.num, 2))
                if srTime != -1:
                    info = db.get_user_info(self.id)
                    srTime = round((info['timeArif'] * (info['countArif'] - self.num) + srTime * self.num) / info['countArif'], 2)
                
                db.set_new_value(self.id, 'timeArif', srTime)
                all_rating = db.get_user_attribute(self.id, 'allRating')
                self.send_message(
                    f"–í —ç—Ç–æ—Ç —Ä–∞–∑ —Ä–µ—à–µ–Ω–æ {self.num} {get_word('–ø—Ä–∏–º–µ—Ä', self.num)}.\n–í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ —É—Ö–æ–¥–∏–ª–æ {srTime} —Å–µ–∫.\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - {self.mistakes_count} {get_word('–ø—Ä–∏–º–µ—Ä', self.mistakes_count)}.\n–ü—Ä–æ–ø—É—â–µ–Ω–æ - {self.skips_count} {get_word('–ø—Ä–∏–º–µ—Ä', self.skips_count)}.\n\n–†–µ–π—Ç–∏–Ω–≥: {all_rating - self.num} --> {all_rating}\n–ú–µ—Å—Ç–æ: {self.get_position_in_top()}", keyMain2)
            self.solution_mode = -2
            self.num = 0
            self.last_time = -1
            self.all_time = -1
            self.skips_count = 0
            self.mistakes_count = 0
            self.tr = 0
        # INF
        elif self.solution_mode >= 0:
            all_rating = db.get_user_attribute(self.id, 'allRating')
            if self.old_rating == all_rating:
                self.send_message("–£–≤—ã, –Ω–µ —Ä–µ—à–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ :(", keyMain2)
            else:
                self.send_message(f"–†–µ–π—Ç–∏–Ω–≥: {self.old_rating} --> {all_rating}\n–ú–µ—Å—Ç–æ: {self.get_position_in_top()}", keyMain2)
            self.solution_mode = -2
            self.ind = 0
            self.num = 0
            self.tr = 0
            self.answer_choice = False
        else:
            if self.id not in VK_ADMINS:
                self.send_message(
                    "–ü—Ä–∏–≤–µ—Ç! –Ø –æ–±—É—á–∞—é—â–∏–π —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞ Python!\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞–Ω–∏—è', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—à–µ–Ω–∏—é, –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ —É–∂–µ —Ä–µ—à–µ–Ω–æ!",
                    keyMain)
                return
            self.send_message("–ü—Ä–∏–≤–µ—Ç! –Ø –æ–±—É—á–∞—é—â–∏–π —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞ Python!\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞–Ω–∏—è', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—à–µ–Ω–∏—é, –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ —É–∂–µ —Ä–µ—à–µ–Ω–æ!", keyMainForAdmin)

    def get_self_stats(self):
        user_stats = db.get_user_info(self.id)

        stat = "–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞:\n"
        count_arif = user_stats['countArif']
        if count_arif != 0:
            stat += f"–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–æ {count_arif} {get_word('–ø—Ä–∏–º–µ—Ä', count_arif)} ({count_arif} ‚òÜ).\n–í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ —É—Ö–æ–¥–∏–ª–æ {user_stats['timeArif']} c–µ–∫.\n\n–û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏:\n"
            if count_arif == 1:
                stat = stat[0:30] + stat[31::]
        else:
            stat += "–ú–æ–¥—É–ª—å –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏ –µ—â—ë –Ω–µ —Ä–µ—à–∞–ª—Å—è :(\n\n–û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏:\n"

        all_count = 0
        all_rating = 0
        for i in mod_names_for_sql:
            if user_stats[f'count{i}'] == 0:
                stat += f"{module_names[mod_names_for_sql.index(i)]} - 0 –∑–∞–¥–∞–Ω–∏–π (0 ‚òÜ)\n"
            else:
                stats_count = user_stats[f'count{i}']
                rating_count = user_stats[f'rating{i}']
                all_count +=  user_stats[f'count{i}']
                all_rating += user_stats[f'rating{i}']
                stat += f"{module_names[mod_names_for_sql.index(i)]} - {stats_count} {get_word('–∑–∞–¥–∞–Ω–∏–π', stats_count)} ({rating_count} ‚òÜ)\n"

        stat += f"–ò—Ç–æ–≥–æ: {all_count} {get_word('–∑–∞–¥–∞–Ω–∏–π', all_count)} ({all_rating} ‚òÜ)\n\n–í—Å–µ–≥–æ: {user_stats['allRating']} ‚òÜ\n–ú–µ—Å—Ç–æ: {self.get_position_in_top()}"
        self.send_message(stat)

    def get_position_in_top(self):
        return db.get_user_place(self.id)

    def get_users_top(self):
        top = db.get_users_top(10)
        text = ""
        for i in range(len(top)):
            if i == 0:
                text += f"ü•á) {top[i]['name']} - {top[i]['allRating']} ‚òÜ\n"
            elif i == 1:
                text += f"ü•à) {top[i]['name']} - {top[i]['allRating']} ‚òÜ\n"
            elif i == 2:
                text += f"ü•â) {top[i]['name']} - {top[i]['allRating']} ‚òÜ\n"
            else:
                text += f" {i + 1} ) {top[i]['name']} - {top[i]['allRating']} ‚òÜ\n"
        self.send_message(text)

    def get_theory(self):
        text = f"–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ - {ARTICLES_WITH_THEORY[0]}\n"
        for i in range(5):
            text += f"{module_names[i]} - {ARTICLES_WITH_THEORY[i + 1]}\n"
        self.send_message(text)

    def send_message(self, text, key=0):
        if key == 0:
            vk.method('messages.send', {'user_id': self.id, 'message': text, 'random_id': 0})
            return
        vk.method('messages.send', {'user_id': self.id, 'message': text, 'random_id': 0, 'keyboard': key})

    def send_photo(self, text, attachment, key=0):
        vk.method('messages.send', {'user_id': self.id, 'message': text, 'random_id': 0, 'attachment': attachment, 'keyboard': key})

    def send_document(self, text, ph, key=0):
        upload_url = session.docs.getMessagesUploadServer(type='doc', peer_id=self.id)['upload_url']
        files = {'file': open(ph, 'rb')}
        response = requests.post(upload_url, files=files)
        file_data = response.json()['file']
        saved_file = session.docs.save(file=file_data, title=ph)

        session.messages.send(
            user_id=self.id,
            attachment=f"doc{saved_file['doc']['owner_id']}_{saved_file['doc']['id']}",
            message=text,
            random_id=0
        )
    
def get_username(id):
    data = vk.method("users.get", {"user_ids": id})[0]
    return "{} {}".format(data["first_name"], data["last_name"])


def get_arif_problem(num):
    mode = choice(ver)
    num += 1
    if num == 1:
        x = randint(1, 10)
        y = randint(1, 10)
        z = x + y
        return [f"{x} + {y} = ?", abs(z)]
    if num == 2:
        x = randint(1, 10)
        y = randint(1, 10)
        z = x * y
        return [f"{x} * {y} = ?", abs(z)]
    if num == 3:
        x = randint(1, 20)
        if x % 2 == 0:
            x += 1
        y = 2
        z = x / y
        return [f"{x} / {y} = ?", abs(z)]
    if mode == 1:
        sign = choice([1, 1, 2])
        if sign == 1:
            x = randint(1, min(num * 10, 100))
            y = randint(1, min(num * 10, 100))
            if x > y:
                x, y = y, x
            z = x - y
            return [f"abs({x} - {y}) = ?", abs(z)]
        else:
            x = randint(1, min(num * 10, 100))
            y = randint(1, min(num * 10, 100))
            z = x + y
            return [f"{x} + {y} = ?", abs(z)]
    elif mode == 2:
        x = randint(1, min(20, num * 4))
        y = randint(1, max(x // 7, 10))
        if randint(0, 1):
            x, y = y, x
        z = x * y
        return [f"{x} * {y} = ?", z]
    elif mode == 3:
        sign = choice([0, 1, 1, 2, 2])
        if sign == 0:
            x = randint(1, 100)
            y = choice([2, 4, 5, 8, 10])
            if y == 8 and x % 2:
                x += 1
            elif x % y == 0:
                x += 1
            z = x / y
            return [f"{x} / {y} = ?", z]
        elif sign == 1:
            x = randint(1, 100)
            y = randint(1, x // 2 + 1)
            z = x // y
            return [f"{x} // {y} = ?", z]
        elif sign == 2:
            x = randint(1, 100)
            y = randint(1, x // 2 + 10)
            z = x % y
            return [f"{x} % {y} = ?", z]
    elif mode == 4:
        x = randint(2, 15)
        y = randint(2, 4)
        if x ** y > 200 and x != 0:
            y -= 1
        if x > 10:
            x = 2
        if x == 2:
            y = randint(2, 10)
        z = x ** y
        return [f"{x} ** {y} = ?", z]
    elif mode == 5:
        x = choice([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 361, 400])
        y = 0.5
        z = round(x ** y)
        return [f"{x} ** {y} = ?", z]
    elif mode == 6:
        x = randint(0, 20)
        y = randint(1, 9999)
        if y > 5000:
            y //= 10
        else:
            y = randint(1, 9999)
        z = float(f"{x}.{y}")
        modeRound = randint(0, 1)
        digit = randint(0, len(str(z).split(".")[1]) - 1)
        if modeRound == 0:
            return [f"round({z}) = ?", round(z)]
        if digit == 0:
            digit += 1
        return [f"round({z}, {digit}) = ?", round(z, digit)]


def get_word(word, number):
    if word == '–ø—Ä–∏–º–µ—Ä':
        if 10 <= number <= 20:
            return word + "–æ–≤"
        if number % 10 == 1:
            return word
        if 2 <= (number % 10) <= 4:
            return word + "a"
        return word + "–æ–≤"

    if number % 10 == 0:
        return "–∑–∞–¥–∞–Ω–∏–π"
    if number % 10 == 1 and not 10 <= number <= 20:
        return "–∑–∞–¥–∞–Ω–∏–µ"
    if number % 10 <= 4 and not 10 <= number <= 20:
        return "–∑–∞–¥–∞–Ω–∏—è"
    return "–∑–∞–¥–∞–Ω–∏–π"

def update_problem_indexes():
    for i in users:
        for k in range(cnt):
            users[i].problem_indexes[k] = [j for j in range(1, len(problem_answers[k]) + 1)]

def bot_start():
    print("–ë–æ—Ç –≤ –í–ö –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    global module_names, problem_text, problem_answers, problem_photos, cnt
    cnt = len(module_names)
    problem_text = [0] * cnt
    problem_answers = [0] * cnt
    problem_photos = [0] * cnt

    # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞–Ω–∏—è/–æ—Ç–≤–µ—Ç—ã

    with open('Problems/vk_uploaded_problems.json', 'r') as file:
        uploaded = json.load(file)
    
    is_new_problems = False

    for i in range(cnt):
        file = open(f"{module_names[i]}/answers.txt", "r", encoding='utf-8')
        content = file.read().split("\n")
        problem_answers[i] = content
        file.close()

        file = open(f"{module_names[i]}/problems.txt", "r", encoding='utf-8')
        content = file.read().split("\n")
        problem_text[i] = content
        file.close()
    
        if not uploaded.get(module_names[i]):
            uploaded[module_names[i]] = []
        differences = len(problem_answers[i]) - len(uploaded[module_names[i]])
        if differences > 0:
            is_new_problems = True
            for j in range(len(uploaded[module_names[i]]) + 1, len(problem_answers[i]) + 1):
                print("–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
                try:
                    photo = vk_api.VkUpload(vk).photo_messages(f"{module_names[i]}/quest{j}.png")
                except:
                    sleep(3)
                    photo = vk_api.VkUpload(vk).photo_messages(f"{module_names[i]}/quest{j}.png")
                    
                owner_id = photo[0]['owner_id']
                photo_id = photo[0]['id']
                access_key = photo[0]['access_key']
                uploaded[module_names[i]].append(f'photo{owner_id}_{photo_id}_{access_key}')
        problem_photos[i] = uploaded[module_names[i]]

    if is_new_problems:
        with open('Problems/vk_uploaded_problems.json', 'w') as file:
            json.dump(uploaded, file)

    # –°–æ–±–∏—Ä–∞–µ–º –∞–π–¥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
    all_users = db.get_all_platform_users('VK')
    for i in all_users:
        users[int(i['id'])] = User(i)
        
    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–æ–≤
    s = 1
    global ver
    ver = []
    for i in prims:
        for j in range(i):
            ver.append(s)
        s += 1

    print("–ë–æ—Ç –≤ –í–ö –∑–∞–ø—É—â–µ–Ω")

def add(event):
    id = event.user_id

    if not id in users:
        db.add_user(id, get_username(id), 'VK')
        users[id] = User(db.get_user_info(id))
        if id in VK_ADMINS:
            users[id].send_message(
                "–ü—Ä–∏–≤–µ—Ç! –Ø –æ–±—É—á–∞—é—â–∏–π —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞ Python! \n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞–Ω–∏—è', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—à–µ–Ω–∏—é, –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ —É–∂–µ —Ä–µ—à–µ–Ω–æ!",
                keyMainForAdmin)
        else:
            users[id].send_message("–ü—Ä–∏–≤–µ—Ç! –Ø –æ–±—É—á–∞—é—â–∏–π —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞ Python!\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞–Ω–∏—è', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—à–µ–Ω–∏—é, –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ —É–∂–µ —Ä–µ—à–µ–Ω–æ!", keyMain)

    else:
        if users[id].solution_mode != -2:
            users[id].get_user_answer("ans")
            return
        users[id].send_message("–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏.\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–µ–æ—Ä–∏–µ–π, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–¢–µ–æ—Ä–∏—è'", keyMain2)

def save_stats():
    users_stats = db.get_all_platform_users('VK')
    user_stats_json = {}
    
    for user in users_stats:
        user_stats_json[user['id']] = user

    with open("Technical/vk_users_stats.json", 'w') as file:
        json.dump(user_stats_json, file)

def delete_stats(id):
    users[id].send_document("–°–ø–æ—Å–æ–± –æ–±–Ω—É–ª–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.txt", '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.txt')

def admin_command(text, id):
    global problem

    if text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º":
        users[id].adminMode = -1
        users[id].send_message("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", keyAdmin)

    elif text == "Save":
        save_stats()

    elif text == "Reload":
        bot_start()
        users[id].send_message("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    elif text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
        users[id].send_message("–î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –≤–µ—Ä—Å–∏–∏: https://t.me/pythonlearners_bot")

    elif text == "–û–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏":
        delete_stats(id)

    elif text == "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        get_users_table(id)
    elif text == "–î–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π":
        users[id].send_document("–°–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º, –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.txt", '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.txt')
    else:
        users[id].send_message(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –æ–±—É—á–∞—é—â–∏–π —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞ Python!\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞–Ω–∏—è', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—à–µ–Ω–∏—é, –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ —É–∂–µ —Ä–µ—à–µ–Ω–æ!",
            keyMainForAdmin)

def get_button(text, color):
    return {
        "action" : {
            "type" : "text",
            "payload" : "{\"button\" : \"" + "1" + "\"}",
            "label" : f"{text}"
        },
        "color" : f"{color}"
    }


def get_answer_options(vars):
    shuffle(vars)
    if len(vars) == 4:
        keyAns = {
            "one_time": False,
            "buttons": [
                [get_button(vars[0], "primary"), get_button(vars[1], "primary")],
                [get_button(vars[2], "primary"), get_button(vars[3], "primary")],
                [get_button("–ù–∞–∑–∞–¥", 'secondary'), get_button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 'secondary')]
            ]
        }
    elif len(vars) == 3:
        keyAns = {
            "one_time": False,
            "buttons": [
                [get_button(vars[0], "primary")],
                [get_button(vars[1], "primary")],
                [get_button(vars[2], "primary")],
                [get_button("–ù–∞–∑–∞–¥", 'secondary'), get_button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 'secondary')]
            ]
        }
    else:
        keyAns = {
            "one_time": False,
            "buttons": [
                [get_button(vars[0], "primary")],
                [get_button(vars[1], "primary")],
                [get_button("–ù–∞–∑–∞–¥", 'secondary'), get_button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 'secondary')]
            ]
        }
    keyAns = json.dumps(keyAns, ensure_ascii=False).encode('utf-8')
    return str(keyAns.decode("utf-8"))

def adding_check():
    with open('Problems/vk_uploaded_problems.json', 'r') as file:
        uploaded = json.load(file)
    
    is_new_problems = False
    for i in range(cnt):
        file = open(f"{module_names[i]}/answers.txt", "r", encoding='utf-8')
        content = file.read().split("\n")
        problem_answers[i] = content
        file.close()
    
        if not uploaded.get(module_names[i]):
            uploaded[module_names[i]] = []
        differences = len(problem_answers[i]) - len(uploaded[module_names[i]])
        if differences > 0:
            is_new_problems = True
            for j in range(len(uploaded[module_names[i]]) + 1, len(problem_answers[i]) + 1):
                try:
                    photo = vk_api.VkUpload(vk).photo_messages(f"{module_names[i]}/quest{j}.png")
                except:
                    photo = vk_api.VkUpload(vk).photo_messages(f"{module_names[i]}/quest{j}.png")
                    
                owner_id = photo[0]['owner_id']
                photo_id = photo[0]['id']
                access_key = photo[0]['access_key']
                uploaded[module_names[i]].append(f'photo{owner_id}_{photo_id}_{access_key}')
        problem_photos[i] = uploaded[module_names[i]]

    if is_new_problems:
        with open('Problems/vk_uploaded_problems.json', 'w') as file:
            json.dump(uploaded, file)
        update_problem_indexes()
        print("–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

def get_users_table(id):
    file = open("table.html", 'w')
    masForHTML = []
    ratings = []

    all_users = db.get_all_users()
    all_users.sort(key=lambda x: x['allRating'], reverse=True)


    for i in all_users:
        ratings.append(i['allRating'])
    
    for user in all_users:

        rank = ratings.index(user['allRating']) + 1
        count = ratings.count(user['allRating'])
        rang1, rang2 = rank, rank + count - 1
        color = 'black'

        if user['platform'] == 'TG':
            color = 'rgb(35, 0, 149)'

        if rang1 == rang2:
            rang = str(rang1)
        else:
            rang = f"{rang1}-{rang2}"

        user_name = re.sub(r'[^–ê-—èA-z0-9() ]', '', user['name'])

        masForHTML.append([user_name, user['countArif'], user['ratingP'], user['ratingU'],
                            user['ratingC'], user['ratingM'], user['ratingF'],
                            user['allRating'], rang, color])

    file.write(template.render(my_array=masForHTML))
    file.close()


    myZip = zipfile.ZipFile("table.zip", 'w')
    myZip.write('table.html')
    myZip.close()
    
    users[id].send_document("–í –∞—Ä—Ö–∏–≤–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. (–ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º –≤–µ—Ä—Å–∏—é)", 'table.zip')
    os.remove("table.zip")
    os.remove("table.html")

keyMain = {
        "one_time": False,
        "buttons": [
            [get_button("–ó–∞–¥–∞–Ω–∏—è", 'primary'), get_button("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 'primary'), get_button("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 'primary')]
        ]
    }
keyMain = json.dumps(keyMain, ensure_ascii=False).encode('utf-8')
keyMain = str(keyMain.decode("utf-8"))

keyMainForAdmin = {
        "one_time": False,
        "buttons": [
            [get_button("–ó–∞–¥–∞–Ω–∏—è", 'primary'), get_button("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 'primary'), get_button("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 'primary')],
            [get_button("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º", 'secondary')]
        ]
    }
keyMainForAdmin = json.dumps(keyMainForAdmin, ensure_ascii=False).encode('utf-8')
keyMainForAdmin = str(keyMainForAdmin.decode("utf-8"))

keyMain2 = {
        "one_time": False,
        "buttons": [
            [get_button('–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞', 'primary'), get_button('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', 'primary'), get_button('–£—Å–ª–æ–≤–∏—è', 'primary')],
            [get_button('–¶–∏–∫–ª—ã', 'primary'), get_button('–ú–∞—Å—Å–∏–≤—ã', 'primary'), get_button('–§—É–Ω–∫—Ü–∏–∏', 'primary')],
            [get_button('–ù–∞–∑–∞–¥', 'secondary'), get_button("–¢–æ–ø üèÜ", "secondary"), get_button("–¢–µ–æ—Ä–∏—è", "secondary")]
        ]
    }
keyMain2 = json.dumps(keyMain2, ensure_ascii=False).encode('utf-8')
keyMain2 = str(keyMain2.decode("utf-8"))


keyInf2 = {
        "one_time": False,
        "buttons": [
            [get_button("–ù–∞–∑–∞–¥", 'primary'), get_button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 'primary')],
        ]
    }
keyInf2 = json.dumps(keyInf2, ensure_ascii=False).encode('utf-8')
keyInf2 = str(keyInf2.decode("utf-8"))

keyAdmin = {
        "one_time": False,
        "buttons": [
            [get_button("–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 'primary'), get_button("–û–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", 'negative')],
            [get_button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", 'primary'), get_button("–î–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π", 'primary')],
            [get_button("–ù–∞–∑–∞–¥", 'secondary')]
        ]
    }
keyAdmin = json.dumps(keyAdmin, ensure_ascii=False).encode('utf-8')
keyAdmin = str(keyAdmin.decode("utf-8"))

keyVar = {
        "one_time": False,
        "buttons": [
            [get_button('–ù–µ—Ç', 'primary'), get_button('–î–∞', 'negative')]
        ]
    }
keyVar = json.dumps(keyVar, ensure_ascii=False).encode('utf-8')
keyVar = str(keyVar.decode("utf-8"))

bot_start()

while True:
    try:
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                try:
                    message_counter += 1
                    if message_counter >= 3:
                        adding_check()
                        save_stats()
                        message_counter = 0

                    id = event.user_id
                    if id not in users:
                        add(event)
                    if event.text == "":
                        continue
                    elif event.text in module_names and users[id].adminMode == -2:
                        users[id].get_user_answer(event.text)
                    elif event.text == "–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞" and users[id].solution_mode == -2:
                        users[id].solution_mode = -1
                        users[id].get_problem()
                    elif event.message == "–ù–∞–∑–∞–¥" or event.message == "–û—Ç–º–µ–Ω–∞":
                        users[id].Stop()
                    elif users[id].solution_mode != -2:
                        users[id].get_user_answer(event.text)
                    elif event.text == "–ó–∞–¥–∞–Ω–∏—è":
                        users[id].send_message(
                            "–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏.\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–µ–æ—Ä–∏–µ–π, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–¢–µ–æ—Ä–∏—è'",
                            keyMain2)
                    elif event.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                        users[id].get_self_stats()
                    elif event.text == "–¢–µ–æ—Ä–∏—è":
                        users[id].get_theory()
                    elif event.text == "–¢–æ–ø üèÜ":
                        users[id].get_users_top()
                    elif event.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
                        users[id].send_message(INFORMATION)
                    else:
                        if id in VK_ADMINS and (event.text in admin_commands or users[id].adminMode != -1):
                            admin_command(event.message, id)
                        else:
                            if id in VK_ADMINS:
                                users[id].send_message("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", keyMainForAdmin)
                            else:
                                users[id].send_message("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", keyMain)
                except:
                    log = f"–û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: https://vk.com/id{event.user_id}\n–í—Ä–µ–º—è: {strftime('%H:%M')}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {event.message}"
                    print(sys.exc_info())
                    exc_type, exc_value, exc_traceback = sys.exc_info()
                    log += f"\n–û—à–∏–±–∫–∞ {exc_type.__name__} –≤ —Å—Ç—Ä–æ–∫–µ {exc_traceback.tb_lineno}: {exc_value}"
                    users[VK_ADMINS[0]].send_message(log)
    except:
        save_stats()
        print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ {strftime('%H:%M')}")
        sleep(30)