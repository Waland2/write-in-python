import json
import re
import telebot
from random import *
from time import *
import sys
import os
from jinja2 import Template
import database as db
from config import *

if TG_TOKEN == '':
    print("–¢–æ–∫–µ–Ω –¥–ª—è –æ—Ç –±–æ—Ç–∞ –≤ TG –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, TG –≤–µ—Ä—Å–∏—è –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞!")
    exit()

bot = telebot.TeleBot(TG_TOKEN)
cnt = -1
problem_answers = []
problem_text = []
problem_photos = []
users = {}
message_counter = 0
ver = []
problem = []
module_names = ["–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", "–£—Å–ª–æ–≤–∏—è", "–¶–∏–∫–ª—ã", "–ú–∞—Å—Å–∏–≤—ã", "–§—É–Ω–∫—Ü–∏–∏"]
mod_names_for_sql = ['P', 'U', 'C', 'M', 'F']
admin_commands = ["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º", "Save", "Reload", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "–û–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–î–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π", "get_user_stats"]
prims = [2, 1, 4, 2, 2, 2]
template = Template("""
  <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</title>
</head>
<body>
    <style>
        table {
          border-collapse: collapse;
          width: 75%;
          margin-left: auto;
          margin-right: auto;
        }
        th, td {
          text-align: center;
          padding: 8px;
          border: 1px solid black;
        }
        th {
          background-color: white;
          font-weight: bold;
        }
        p {
          text-align: center;
          font-size: 20;
        }
      </style>
          <p> –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π </p>
          <table>
             <tr>
              <th scope="col", style="background-color: lightgray;">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
              <th scope="col", style="background-color: lightgray;">–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞</th>
              <th scope="col", style="background-color: lightgray;">–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ</th>
              <th scope="col", style="background-color: lightgray;">–£—Å–ª–æ–≤–∏—è</th>
              <th scope="col", style="background-color: lightgray;">–¶–∏–∫–ª—ã</th>
              <th scope="col", style="background-color: lightgray;">–ú–∞—Å—Å–∏–≤—ã</th>
              <th scope="col", style="background-color: lightgray;">–§—É–∫–Ω—Ü–∏–∏</th>
              <th scope="col", style="background-color: lightgray;">–í—Å–µ–≥–æ –±–∞–ª–æ–≤</th>
              <th scope="col", style="background-color: lightgray;">–ú–µ—Å—Ç–æ</th>
            </tr>
            {% for item in my_array %}
            <tr>
              <th scope="col"><span style="color: {{item[9]}};">{{item[0]}}</span></th>
              <th scope="col">{{item[1]}}</th>
              <th scope="col">{{item[2]}}</th>
              <th scope="col">{{item[3]}}</th>
              <th scope="col">{{item[4]}}</th>
              <th scope="col">{{item[5]}}</th>
              <th scope="col">{{item[6]}}</th>
              <th scope="col">{{item[7]}}</th>
              <th scope="col">{{item[8]}}</th>
            </tr>
            {% endfor %}  
        </table>
</body>
</html>

""")


class User:
    def __init__(self, info):
        self.id = int(info['id'])
        self.num = 0
        self.quest = 0
        self.ans = 0
        self.solution_mode = -2
        self.tr = 0
        self.last_time = -1
        self.all_time = -1
        self.skips_count = 0
        self.mistakes_count = 0
        self.answer_choice = False
        self.ind = 0
        self.problem_indexes = [[], [], [], [], []]
        self.rating = 0
        self.old_rating = 0
        self.adminMode = -2
        self.name = info['name']
        self.problem_info = {}
        for i in range(cnt):
            self.problem_indexes[i] = [j for j in range(1, len(problem_answers[i]) + 1)]
            shuffle(self.problem_indexes[i])

    def get_problem(self):
        if self.solution_mode == -1:
            self.quest, self.ans = get_arif_problem(self.num)
            self.ans = str(self.ans)
            if self.num == 0 and self.skips_count + self.mistakes_count == 0:
                self.send_message(
                    f"–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ —è–∑—ã–∫–∞ Python. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ –º–æ–¥—É–ª–µ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.\n\n–í–æ—Ç —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä: {self.quest}",
                    keyInf2)
                return
            self.send_message(self.quest, keyInf2)
        else:
            if self.ind >= len(problem_text[self.solution_mode]):
                self.ind = 0
                self.problem_indexes[self.solution_mode] = [j for j in range(1, len(problem_answers[self.solution_mode]) + 1)]
                shuffle(self.problem_indexes[self.solution_mode])
            self.num = self.problem_indexes[self.solution_mode][self.ind] - 1
            self.ans, self.rating = problem_answers[self.solution_mode][self.num].split(" | ")
            self.rating = int(self.rating)
            if self.ans[0] == '!':
                self.answer_choice = True
                masAns = self.ans.split('!')
                masAns.pop(0)
                self.ans = masAns[0]
                keyInf3 = get_answer_options(masAns)
                self.send_photo(f'‚Ññ{self.num + 1} ({self.rating} ‚òÜ)\n{problem_text[self.solution_mode][self.num]}',
                               problem_photos[self.solution_mode][self.num], keyInf3)
                return
            self.send_photo(f'‚Ññ{self.num + 1} ({self.rating} ‚òÜ)\n{problem_text[self.solution_mode][self.num]}',
                           problem_photos[self.solution_mode][self.num], keyInf2)

    def get_user_answer(self, answer):
        if self.solution_mode == -1:
            if answer == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°":
                self.send_message("–•–æ—Ä–æ—à–æ, –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω")
                self.skips_count += 1
                self.tr = 0
                self.get_problem()
                self.last_time = time()
                return
            answer = answer.replace(',', '.')
            if answer == self.ans:
                self.tr = 0
                self.num += 1
                if self.num in [5, 10, 20, 30, 40, 50, 100]:
                    self.send_message(f"{choice(CORRECTLY)} ‚úÖ, –†–µ—à–µ–Ω–æ —É–∂–µ {self.num} –ø—Ä–∏–º–µ—Ä–æ–≤, {choice(CONGRATULATIONS)}")
                else:
                    self.send_message(f"{choice(CORRECTLY)} ‚úÖ")
                db.update_value(self.id, 'allRating', 1)

                times = time()
                if self.last_time != -1 and times - self.last_time < 120:
                    self.all_time += times - self.last_time
                self.last_time = times
                self.get_problem()
            else:
                if self.tr == 1:
                    ans = f"–°–Ω–æ–≤–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, üòø\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –±—ã–ª–æ: {self.ans}"
                    if self.quest.find("** 0.5") != -1:
                        ans += f"\n'**' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞ –≤ —Å—Ç–µ–ø–µ–Ω—å. –ï—Å–ª–∏ –≤–æ–æ–∑–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤ 0.5 —Å—Ç–µ–ø–µ–Ω—å, —Ç–æ —ç—Ç–æ —Ä–∞–≤–Ω–æ—Å–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è –∏–∑ —á–∏—Å–ª–∞."
                    elif self.quest.find("**") != -1:
                        a, b = self.quest.split(" ** ")
                        b, c = b.split(" = ")
                        ans += f"\n'**' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞ –≤ —Å—Ç–µ–ø–µ–Ω—å. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ–º –º—ã –≤–æ–∑–≤–æ–¥–∏–º —á–∏—Å–ª–æ {a} –≤ {b} —Å—Ç–µ–ø–µ–Ω—å"
                    elif self.quest.find("//") != -1:
                        ans += f"\n'//' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ, —Ç–æ –µ—Å—Ç—å –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å"
                    elif self.quest.find("%") != -1:
                        ans += f"\n'%' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–ª–µ–Ω–∏—è, —Ç–æ –µ—Å—Ç—å –ø–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–µ"
                    elif self.quest.find("abs") != -1:
                        ans += f"\n'abs' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –º–æ–¥—É–ª—å —á–∏—Å–ª–∞, —Ç–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω—è–µ—Ç –∑–Ω–∞–∫ –º–∏–Ω—É—Å–∞ –Ω–∞ –ø–ª—é—Å"
                    elif self.quest.find("round") != -1 and self.quest.find(",") != -1:
                        ans += f"\n'round' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—É–∫–Ω—Ü–∏—é –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —á–∏—Å–ª–∞, –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ –∫–∞–∫–æ–≥–æ –∑–Ω–∞–∫–∞ –Ω–∞–¥–æ –æ–∫—Ä—É–≥–ª—è—Ç—å"
                    elif self.quest.find("round") != -1:
                        ans += f"\n'round' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—É–∫–Ω—Ü–∏—é –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —á–∏—Å–ª–∞, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Ü–µ–ª–æ–≥–æ"
                    self.send_message(ans)
                    self.tr = 0
                    self.mistakes_count += 1
                    self.get_problem()
                    return
                self.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, üòø\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
                self.tr += 1
        else:
            if self.solution_mode == -2:
                if answer in module_names:
                    self.old_rating = db.get_user_attribute(self.id, 'allRating')
                    self.solution_mode = module_names.index(answer)
                    self.ind = 0
                    shuffle(self.problem_indexes[self.solution_mode])
                    self.get_problem()
                else:
                    self.send_message("–¢–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return
                return
            if answer == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°":
                self.tr = 0
                self.send_message("–•–æ—Ä–æ—à–æ, —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                self.ind += 1
                self.answer_choice = False
                self.get_problem()
                return
            answer = answer.replace('&gt;', '>')
            if answer == self.ans and not self.answer_choice:
                db.update_new_values(self.id, [
                    [f'count{mod_names_for_sql[self.solution_mode]}', 1],
                    [f'rating{mod_names_for_sql[self.solution_mode]}', self.rating],
                    ['allRating', self.rating]
                ])
                self.tr = 0

                all_rating = db.get_user_attribute(self.id, 'allRating')
                self.ind += 1
                self.send_message(f"{choice(CORRECTLY)} ‚úÖ\n–†–µ–π—Ç–∏–Ω–≥: {all_rating - self.rating} --> {all_rating}")
                self.get_problem()
                return
            elif self.answer_choice:
                self.answer_choice = False
                if answer == self.ans:
                    db.update_new_values(self.id, [
                        [f'count{mod_names_for_sql[self.solution_mode]}', 1],
                        [f'rating{mod_names_for_sql[self.solution_mode]}', self.rating],
                        ['allRating', self.rating]
                    ])
                    
                    all_rating = db.get_user_attribute(self.id, "allRating")
                    self.ind += 1
                    self.send_message(f"{choice(CORRECTLY)} ‚úÖ\n–†–µ–π—Ç–∏–Ω–≥: {all_rating - self.rating} --> {all_rating}")
                    self.get_problem()
                    return
                self.send_message(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå, —Ç—ã —Å–º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é –ø–æ–∑–∂–µ")
                self.tr = 0
                self.ind += 1
                self.get_problem()
            else:
                self.tr += 1
                if self.tr == 1:
                    self.send_message(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
                else:
                    self.send_message(f"–°–Ω–æ–≤–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå, —Ç—ã —Å–º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é –ø–æ–∑–∂–µ")
                    self.tr = 0
                    self.ind += 1
                    self.get_problem()

    def Stop(self):

        if self.adminMode == -1:
            if self.id in REDACTORS:
                self.send_message("–•–æ—Ä–æ—à–æ", keyMainForRed)
            else:
                self.send_message("–•–æ—Ä–æ—à–æ", keyMainForAdmin)
            self.adminMode = -2
            return
        if self.adminMode == 0:
            if self.id in REDACTORS:
                self.send_message("–•–æ—Ä–æ—à–æ", keyMainForRed)
            else:
                self.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", keyAdmin)
            self.adminMode = -1
            return
        if self.adminMode == 1:
            self.send_message("–í—ã–±–µ—Ä—Ç–µ –º–æ–¥—É–ª—å, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", keyMain1)
            self.adminMode = 0
            return
        if self.adminMode == 2:
            self.adminMode = 1
            os.remove(self.problem[1])
            self.send_message("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å", keyBack)
            return

        if self.adminMode == 4 or self.adminMode == 5:
            self.send_message("–£ –∑–∞–¥–∞–Ω–∏—è –±—É–¥—É—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤?", keyVar)
            self.adminMode = 3
            return

        if self.adminMode == 6:
            self.send_message(
                '–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö –¥–≤–æ–µ—Ç–æ—á–∏—è–º–∏. –ü—Ä–∏–º–µ—Ä:\n–í–∞—Ä–∏–∞–Ω—Ç1:–í–∞—Ä–∏–∞–Ω—Ç2:–í–∞—Ä–∏–∞–Ω—Ç3:–í–∞—Ä–∏–∞–Ω—Ç4\n–í–∞—Ä–∏–∞–Ω—Ç1 - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–†–ê–í–ò–õ–¨–ù–´–ú')
            self.adminMode = 4
            return
        if self.adminMode == 7:
            self.send_message("–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
            self.adminMode = 5
            return
        if self.adminMode == 100:
            self.send_message("–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É", keyAdmin)
            self.adminMode = -1
            return
        
        if self.solution_mode == -1:
            db.update_value(self.id, 'countArif', self.num)
            if self.num == 0:
                self.send_message("–£–≤—ã, –Ω–µ —Ä–µ—à–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ :(", keyMain2)
            elif self.num == 1:
                all_rating = db.get_user_attribute(self.id, 'allRating')
                self.send_message(f"–í —ç—Ç–æ—Ç —Ä–∞–∑ —Ä–µ—à–µ–Ω–æ {self.num} {get_word('–ø—Ä–∏–º–µ—Ä', self.num)}.\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - {self.mistakes_count} {get_word('–ø—Ä–∏–º–µ—Ä', self.mistakes_count)}.\n–ü—Ä–æ–ø—É—â–µ–Ω–æ - {self.skips_count} {get_word('–ø—Ä–∏–º–µ—Ä', self.skips_count)}.\n\n–†–µ–π—Ç–∏–Ω–≥: {all_rating - self.num} --> {all_rating}\n–ú–µ—Å—Ç–æ: {self.get_position_in_top()}", keyMain2)
            else:
                srTime = abs(round(self.all_time / self.num, 2))
                if srTime != -1:
                    info = db.get_user_info(self.id)
                    srTime = round((info['timeArif'] * (info['countArif'] - self.num) + srTime * self.num) / info['countArif'], 2)
                
                db.set_new_value(self.id, 'timeArif', srTime)
                all_rating = db.get_user_attribute(self.id, 'allRating')
                self.send_message(
                    f"–í —ç—Ç–æ—Ç —Ä–∞–∑ —Ä–µ—à–µ–Ω–æ {self.num} {get_word('–ø—Ä–∏–º–µ—Ä', self.num)}.\n–í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ —É—Ö–æ–¥–∏–ª–æ {srTime} —Å–µ–∫.\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - {self.mistakes_count} {get_word('–ø—Ä–∏–º–µ—Ä', self.mistakes_count)}.\n–ü—Ä–æ–ø—É—â–µ–Ω–æ - {self.skips_count} {get_word('–ø—Ä–∏–º–µ—Ä', self.skips_count)}.\n\n–†–µ–π—Ç–∏–Ω–≥: {all_rating - self.num} --> {all_rating}\n–ú–µ—Å—Ç–æ: {self.get_position_in_top()}",
                    keyMain2)
            self.solution_mode = -2
            self.num = 0
            self.last_time = -1
            self.all_time = -1
            self.skips_count = 0
            self.mistakes_count = 0
            self.tr = 0
        # INF
        elif self.solution_mode >= 0:
            all_rating = db.get_user_attribute(self.id, 'allRating')
            if self.old_rating == all_rating:
                self.send_message("–£–≤—ã, –Ω–µ —Ä–µ—à–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ :(", keyMain2)
            else:
                self.send_message(f"–†–µ–π—Ç–∏–Ω–≥: {self.old_rating} --> {all_rating}\n–ú–µ—Å—Ç–æ: {self.get_position_in_top()}", keyMain2)
            self.solution_mode = -2
            self.ind = 0
            self.num = 0
            self.tr = 0
            self.answer_choice = False
        else:
            ans = "–ü—Ä–∏–≤–µ—Ç! –Ø –æ–±—É—á–∞—é—â–∏–π —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞ Python!\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞–Ω–∏—è', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—à–µ–Ω–∏—é, –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ —É–∂–µ —Ä–µ—à–µ–Ω–æ!"
            if self.id in REDACTORS:
                self.send_message(ans, keyMainForRed)
                return

            if self.id not in TG_ADMINS:
                self.send_message(ans, keyMain)
                return
            self.send_message(ans, keyMainForAdmin)

    def get_self_stats(self):
        user_stats = db.get_user_info(self.id)

        stat = "–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞:\n"
        count_arif = user_stats['countArif']
        if count_arif != 0:
            stat += f"–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–æ {count_arif} {get_word('–ø—Ä–∏–º–µ—Ä', count_arif)} ({count_arif} ‚òÜ).\n–í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ —É—Ö–æ–¥–∏–ª–æ {user_stats['timeArif']} c–µ–∫.\n\n–û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏:\n"
            if count_arif == 1:
                stat = stat[0:30] + stat[31::]
        else:
            stat += "–ú–æ–¥—É–ª—å –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏ –µ—â—ë –Ω–µ —Ä–µ—à–∞–ª—Å—è :(\n\n–û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏:\n"

        all_count = 0
        all_rating = 0
        for i in mod_names_for_sql:
            if user_stats[f'count{i}'] == 0:
                stat += f"{module_names[mod_names_for_sql.index(i)]} - 0 –∑–∞–¥–∞–Ω–∏–π (0 ‚òÜ)\n"
            else:
                stats_count = user_stats[f'count{i}']
                rating_count = user_stats[f'rating{i}']
                all_count +=  user_stats[f'count{i}']
                all_rating += user_stats[f'rating{i}']
                stat += f"{module_names[mod_names_for_sql.index(i)]} - {stats_count} {get_word('–∑–∞–¥–∞–Ω–∏–π', stats_count)} ({rating_count} ‚òÜ)\n"

        stat += f"–ò—Ç–æ–≥–æ: {all_count} {get_word('–∑–∞–¥–∞–Ω–∏–π', all_count)} ({all_rating} ‚òÜ)\n\n–í—Å–µ–≥–æ: {user_stats['allRating']} ‚òÜ\n–ú–µ—Å—Ç–æ: {self.get_position_in_top()}"
        self.send_message(stat)

    def get_users_top(self):
        top = db.get_users_top(10)
        text = ""
        for i in range(len(top)):
            if i == 0:
                text += f"ü•á) {top[i]['name']} - {top[i]['allRating']} ‚òÜ\n"
            elif i == 1:
                text += f"ü•à) {top[i]['name']} - {top[i]['allRating']} ‚òÜ\n"
            elif i == 2:
                text += f"ü•â) {top[i]['name']} - {top[i]['allRating']} ‚òÜ\n"
            else:
                text += f" {i + 1} ) {top[i]['name']} - {top[i]['allRating']} ‚òÜ\n"
        self.send_message(text)

    def get_position_in_top(self):
        return db.get_user_place(self.id)

    def get_theory(self):
        text = f"–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ - {ARTICLES_WITH_THEORY[0]}\n"
        for i in range(5):
            text += f"{module_names[i]} - {ARTICLES_WITH_THEORY[i + 1]}\n"
        self.send_message(text)

    def send_message(self, text, key=None):
        bot.send_message(self.id, text, reply_markup=key)

    def send_photo(self, text, attachment, key=None):
        bot.send_photo(self.id, open(attachment, 'rb'), caption=text, reply_markup=key)

    def send_document(self, text, ph, key=None):
        if ph.find('.txt') != -1:
            bot.send_document(self.id, open(ph, encoding='UTF-8'), caption=text, reply_markup=key)
            return
        bot.send_document(self.id, open(ph, encoding='UTF-8'), caption=text, reply_markup=key)


def get_username(event):
    first = event.from_user.first_name
    second = event.from_user.last_name
    name = ""
    if not first is None:
        name += first
        if not second is None:
            name += f" {second}"
    else:
        if not second is None:
            name += f"{second}"

    if event.from_user.username is None:
        if first is not None:
            if second is not None:
                return f"{first} {second}"
            return first
        else:
            if second is None:
                return None
            return second
    if name == event.from_user.username:
        return f"{event.from_user.username}"
    return f"{event.from_user.username} ({name})"

def update_problem_indexes():
    for i in users:
        for k in range(cnt):
            users[i].problem_indexes[k] = [j for j in range(1, len(problem_answers[k]) + 1)]

def get_arif_problem(num):
    mode = choice(ver)
    num += 1
    if num == 1:
        x = randint(1, 10)
        y = randint(1, 10)
        z = x + y
        return [f"{x} + {y} = ?", abs(z)]
    if num == 2:
        x = randint(1, 10)
        y = randint(1, 10)
        z = x * y
        return [f"{x} * {y} = ?", abs(z)]
    if num == 3:
        x = randint(1, 20)
        if x % 2 == 0:
            x += 1
        y = 2
        z = x / y
        return [f"{x} / {y} = ?", abs(z)]
    if mode == 1:
        sign = choice([1, 1, 2])
        if sign == 1:
            x = randint(1, min(num * 10, 100))
            y = randint(1, min(num * 10, 100))
            if x > y:
                x, y = y, x
            z = x - y
            return [f"abs({x} - {y}) = ?", abs(z)]
        else:
            x = randint(1, min(num * 10, 100))
            y = randint(1, min(num * 10, 100))
            z = x + y
            return [f"{x} + {y} = ?", abs(z)]
    elif mode == 2:
        x = randint(1, min(20, num * 4))
        y = randint(1, max(x // 7, 10))
        if randint(0, 1):
            x, y = y, x
        z = x * y
        return [f"{x} * {y} = ?", z]
    elif mode == 3:
        sign = choice([0, 1, 1, 2, 2])
        if sign == 0:
            x = randint(1, 100)
            y = choice([2, 4, 5, 8, 10])
            if y == 8 and x % 2:
                x += 1
            elif x % y == 0:
                x += 1
            z = x / y
            return [f"{x} / {y} = ?", z]
        elif sign == 1:
            x = randint(1, 100)
            y = randint(1, x // 2 + 1)
            z = x // y
            return [f"{x} // {y} = ?", z]
        elif sign == 2:
            x = randint(1, 100)
            y = randint(1, x // 2 + 10)
            z = x % y
            return [f"{x} % {y} = ?", z]
    elif mode == 4:
        x = randint(2, 15)
        y = randint(2, 4)
        if x ** y > 200 and x != 0:
            y -= 1
        if x > 10:
            x = 2
        if x == 2:
            y = randint(2, 10)
        z = x ** y
        return [f"{x} ** {y} = ?", z]
    elif mode == 5:
        x = choice([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 361, 400])
        y = 0.5
        z = round(x ** y)
        return [f"{x} ** {y} = ?", z]
    elif mode == 6:
        x = randint(0, 20)
        y = randint(1, 9999)
        if y > 5000:
            y //= 10
        else:
            y = randint(1, 9999)
        z = float(f"{x}.{y}")
        modeRound = randint(0, 1)
        digit = randint(0, len(str(z).split(".")[1]) - 1)
        if modeRound == 0:
            return [f"round({z}) = ?", round(z)]
        if digit == 0:
            digit += 1
        return [f"round({z}, {digit}) = ?", round(z, digit)]


def get_word(word, number):
    if word == '–ø—Ä–∏–º–µ—Ä':
        if 10 <= number <= 20:
            return word + "–æ–≤"
        if number % 10 == 1:
            return word
        if 2 <= (number % 10) <= 4:
            return word + "a"
        return word + "–æ–≤"

    if number % 10 == 0:
        return "–∑–∞–¥–∞–Ω–∏–π"
    if number % 10 == 1 and not 10 <= number <= 20:
        return "–∑–∞–¥–∞–Ω–∏–µ"
    if number % 10 <= 4 and not 10 <= number <= 20:
        return "–∑–∞–¥–∞–Ω–∏—è"
    return "–∑–∞–¥–∞–Ω–∏–π"


def bot_start():
    print("–ë–æ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    global module_names, problem_text, problem_answers, problem_photos, cnt

    for i in os.listdir('Problem'):
        os.remove(f"Problem/{i}")

    cnt = len(module_names)
    problem_text = [0] * cnt
    problem_answers = [0] * cnt
    problem_photos = [0] * cnt
    # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞–Ω–∏—è/–æ—Ç–≤–µ—Ç—ã
    for i in range(cnt):
        file = open(f"{module_names[i]}/answers.txt", "r", encoding='utf-8')
        content = file.read().split("\n")
        problem_answers[i] = content
        file.close()

        file = open(f"{module_names[i]}/problems.txt", "r", encoding='utf-8')
        content = file.read().split("\n")
        problem_text[i] = content
        file.close()

        mas = []
        for j in range(len(problem_answers[i])):
            mas.append(f"{module_names[i]}/quest{j + 1}.png")
        problem_photos[i] = list(mas)

    # –°–æ–±–∏—Ä–∞–µ–º –∞–π–¥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
    all_users = db.get_all_platform_users('TG')
    for i in all_users:
        users[int(i['id'])] = User(i)
        
    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–æ–≤
    s = 1
    global ver
    ver = []
    for i in prims:
        for j in range(i):
            ver.append(s)
        s += 1
    print("–ë–æ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –∑–∞–ø—É—â–µ–Ω")

def add(event):
    id = event.chat.id

    if not id in users:
        db.add_user(id, get_username(event), 'TG')

        users[id] = User(db.get_user_info(id))
        ans = "–ü—Ä–∏–≤–µ—Ç! –Ø –æ–±—É—á–∞—é—â–∏–π —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞ Python! \n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞–Ω–∏—è', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—à–µ–Ω–∏—é, –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ —É–∂–µ —Ä–µ—à–µ–Ω–æ!"
        if id in TG_ADMINS:
            users[id].send_message(ans, keyMainForAdmin)
        elif id in REDACTORS:
            users[id].send_message(ans, keyMainForRed)
        else:
            users[id].send_message(ans, keyMain)
    else:
        if users[id].solution_mode != -2:
            users[id].get_user_answer("ans")
            return
        users[id].send_message(
            "–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏.\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–µ–æ—Ä–∏–µ–π, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–¢–µ–æ—Ä–∏—è'",
            keyMain2)


def save_stats():
    users_stats = db.get_all_platform_users('TG')
    user_stats_json = {}
    
    for user in users_stats:
        user_stats_json[user['id']] = user

    with open("Technical/tg_users_stats.json", 'w') as file:
        json.dump(user_stats_json, file)

def delete_stats(id):
    users[id].send_document("–°–ø–æ—Å–æ–± –æ–±–Ω—É–ª–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.txt", '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.txt')

def add_problem(event, id):
    user = users[id]
    problem = user.problem_info

    if problem['answer_choice']:
        if id in REDACTORS:
            for j in TG_ADMINS:
                message_to_admin = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{event.from_user.username} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n–ú–æ–¥—É–ª—å: {module_names[problem['module_index']]}\n–í–æ–ø—Ä–æ—Å: {problem['quest']}\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π–í–∞—Ä–∏–∞–Ω—Ç–û—Ç–≤–µ—Ç–∞: {problem['answer'][0]}\n"
                for i in range(1, len(problem['answer'])):
                    message_to_admin += f"–í–∞—Ä–∏–∞–Ω—Ç–û—Ç–≤–µ—Ç–∞{i + 1}: {problem['answer'][i]}\n"
                users[j].send_photo(message_to_admin, problem['photo'], keyVar2)

        module_name = module_names[problem['module_index']]

        os.rename(problem['photo'], f"{module_name}/quest{len(os.listdir(module_name)) - 1}.png")

        with open(f"{module_name}/answers.txt", 'a', encoding='utf-8') as file_with_answers:
            answer = ""
            for i in problem['answer']:
                answer += f'!{i}'
            answer += " | 2"
            file_with_answers.write(f"\n{answer}")

        with open(f"{module_name}/problems.txt", 'a', encoding='utf-8') as file_with_quests:
            file_with_quests.write(f"\n{problem['quest']}")

        problem_photos[problem['module_index']].append(f"{module_name}/quest{len(os.listdir(module_name)) - 2}.png")
        problem_answers[problem['module_index']].append(answer)
        problem_text[problem['module_index']].append(problem['quest'])
        user.problem_info = {}
        user.adminMode = -1
        if id in REDACTORS:
            users[id].send_message('–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', keyMainForRed)
        else:
            users[id].send_message("–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", keyAdmin)
    else:
        if id in REDACTORS:
            for j in TG_ADMINS:
                message_to_admin = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{event.from_user.username} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n–ú–æ–¥—É–ª—å: {module_names[problem['module_index']]}\n–í–æ–ø—Ä–æ—Å: {problem['quest']}\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {problem['answer']}\n"
                users[j].send_photo(message_to_admin, problem['photo'], keyVar2)

        module_name = module_names[problem['module_index']]

        os.rename(problem['photo'], f"{module_name}/quest{len(os.listdir(module_name)) - 1}.png")

        with open(f"{module_name}/answers.txt", 'a', encoding='utf-8') as file_with_answers:
            answer = problem['answer'] + " | 2"
            file_with_answers.write(f"\n{answer}")

        with open(f"{module_name}/problems.txt", 'a', encoding='utf-8') as file_with_quests:
            file_with_quests.write(f"\n{problem['quest']}")

        problem_photos[problem['module_index']].append(f"{module_name}/quest{len(os.listdir(module_name)) - 2}.png")
        problem_answers[problem['module_index']].append(answer)
        problem_text[problem['module_index']].append(problem['quest'])
        user.problem_info = {}
        user.adminMode = -1
        if id in REDACTORS:
            users[id].send_message('–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', keyMainForRed)
        else:
            users[id].send_message("–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", keyAdmin)
    update_problem_indexes()


def admin_command(text, id, event=None):
    mode = users[id].adminMode
    if mode == 0:
        if text not in module_names:
            users[id].send_message("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è", keyMain1)
            return
        users[id].send_message("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å", keyBack)
        users[id].adminMode = 1
        users[id].problem_info['module_index'] = module_names.index(text)

    if mode == 1:
        file_info = bot.get_file(event.photo[-1].file_id)
        download_file = bot.download_file(file_info.file_path)
        src = f"Problem/{event.photo[-1].file_id}.png"
        with open(src, 'wb') as new_file:
            new_file.write(download_file)
        new_file.close()

        users[id].problem_info['photo'] = f"Problem/{event.photo[-1].file_id}.png"
        users[id].adminMode = 2
        users[id].send_message("–ü—Ä–∏—à–ª–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫ –∑–∞–¥–∞–Ω–∏—é", keyBack2)

    if mode == 2:
        users[id].problem_info['quest'] = text
        users[id].adminMode = 3
        users[id].send_message("–£ –∑–∞–¥–∞–Ω–∏—è –±—É–¥—É—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤?", keyVar)

    if mode == 3:
        if text == "–î–∞":
            users[id].problem_info['answer_choice'] = True
            users[id].send_message(
                '–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö –¥–≤–æ–µ—Ç–æ—á–∏—è–º–∏. –ü—Ä–∏–º–µ—Ä:\n–í–∞—Ä–∏–∞–Ω—Ç1:–í–∞—Ä–∏–∞–Ω—Ç2:–í–∞—Ä–∏–∞–Ω—Ç3:–í–∞—Ä–∏–∞–Ω—Ç4\n–í–∞—Ä–∏–∞–Ω—Ç1 - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–†–ê–í–ò–õ–¨–ù–´–ú', keyBack)
            users[id].adminMode = 4
        else:
            users[id].problem_info['answer_choice'] = False
            users[id].adminMode = 5
            users[id].send_message("–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", keyBack)

    if mode == 4:
        try:
            ans = text.split(':')
            if ans[0] == '':
                ans.pop(0)
            if ans[-1] == '':
                ans.pop()
            if len(ans) > 4:
                users[id].send_message("–í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ —á–µ—Ç—ã—Ä—ë—Ö")
            elif len(ans) <= 1:
                users[id].send_message("–í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ –¥–≤—É—Ö")
            elif text.find('!') != -1:
                users[id].send_message("–í –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–Ω–∞–∫–∞ '!'")
            else:
                users[id].problem_info['answer'] = ans
                # users[id].problem.append(ans) # 4
                users[id].adminMode = 6
                textx = f"–ú–æ–¥—É–ª—å: {module_names[users[id].problem_info['module_index']]}\n–í–æ–ø—Ä–æ—Å: {users[id].problem_info['quest']}\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π–í–∞—Ä–∏–∞–Ω—Ç–û—Ç–≤–µ—Ç–∞: {users[id].problem_info['answer'][0]}\n"
                for i in range(1, len(users[id].problem_info['answer'])):
                    textx += f"–í–∞—Ä–∏–∞–Ω—Ç–û—Ç–≤–µ—Ç–∞{i + 1}: {users[id].problem_info['answer'][i]}\n"
                users[id].send_photo(textx, users[id].problem_info['photo'], keyVar2)
        except:
            users[id].send_message(
                '–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö –¥–≤–æ–µ—Ç–æ—á–∏—è–º–∏. –ü—Ä–∏–º–µ—Ä:\n–í–∞—Ä–∏–∞–Ω—Ç1:–í–∞—Ä–∏–∞–Ω—Ç2:–í–∞—Ä–∏–∞–Ω—Ç3:–í–∞—Ä–∏–∞–Ω—Ç4\n–í–∞—Ä–∏–∞–Ω—Ç1 - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–†–ê–í–ò–õ–¨–ù–´–ú')

    if mode == 5:
        users[id].problem_info['answer'] = text
        users[id].adminMode = 6
        textx = f"–ú–æ–¥—É–ª—å: {module_names[users[id].problem_info['module_index']]}\n–í–æ–ø—Ä–æ—Å: {users[id].problem_info['quest']}\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {users[id].problem_info['answer']}\n"
        users[id].send_photo(textx, users[id].problem_info['photo'], keyVar2)

    if mode == 6:
        if text == '–î–æ–±–∞–≤–∏—Ç—å‚úÖ':
            add_problem(event, id)            
        elif text == '–û—Ç–º–µ–Ω–∞‚ùå':
            os.remove(users[id].problem_info['photo'])
            users[id].problem_info = {}
            users[id].adminMode = -1
            if id in REDACTORS:
                users[id].send_message('–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É', keyMainForRed)
                return
            users[id].send_message('–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É', keyAdmin)

    if mode >= 0:
        return

    if id in REDACTORS:
        if text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
            users[id].adminMode = 0
            mes = "–í—ã–±–µ—Ä—Ç–µ –º–æ–¥—É–ª—å, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n"
            for i in module_names:
                cntX = len(os.listdir(i)) - 2
                mes += f"{i} ({cntX} {get_word('–∑–∞–¥–∞–Ω–∏–π', cntX)})\n"
            users[id].send_message(mes, keyMain1)
            return
        users[id].send_message("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", keyMainForRed)
        return
    
    if text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º":
        users[id].adminMode = -1
        users[id].send_message("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", keyAdmin)

    elif text == "Save":
        save_stats()
        users[id].send_message("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

    elif text == "Reload":
        bot_start()
        users[id].send_message("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    elif text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
        users[id].adminMode = 0
        mes = "–í—ã–±–µ—Ä—Ç–µ –º–æ–¥—É–ª—å, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n"
        for i in module_names:
            cntX = len(os.listdir(i)) - 2
            mes += f"{i} ({cntX} {get_word('–∑–∞–¥–∞–Ω–∏–π', cntX)})\n"
        users[id].send_message(mes, keyMain1)
    elif text == "–û–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏":
        delete_stats(id)
    elif text == "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        get_users_table(id)
    elif text == "–î–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π":
        users[id].send_document("–°–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º, –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.txt", '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.txt')
    elif text == "get_user_stats":
        try:
            users[id].send_document("VK", 'Technical/vk_users_stats.json')
        except:
            users[id].send_message("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –í–ö –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∞—Å—å")

        try:
            users[id].send_document("TG", 'Technical/tg_users_stats.json')
        except:
            users[id].send_message("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º–º–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∞—Å—å")

    else:
        if id in REDACTORS:
            users[id].send_message("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", keyMainForRed)
            return
        users[id].send_message("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", keyMainForAdmin)

def get_answer_options(vars):
    shuffle(vars)
    if len(vars) == 4:
        keyAns = telebot.types.ReplyKeyboardMarkup()
        keyAns.resize_keyboard = True
        keyAns.row(vars[0], vars[1])
        keyAns.row(vars[2], vars[3])
    elif len(vars) == 3:
        keyAns = telebot.types.ReplyKeyboardMarkup()
        keyAns.resize_keyboard = True
        keyAns.row(vars[0])
        keyAns.row(vars[1])
        keyAns.row(vars[2])
    else:
        keyAns = telebot.types.ReplyKeyboardMarkup()
        keyAns.resize_keyboard = True
        keyAns.row(vars[0])
        keyAns.row(vars[1])

    keyAns.row("‚¨Ö –ù–∞–∑–∞–¥", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°")
    return keyAns


def get_users_table(id):
    file = open("table.html", 'w', encoding='utf-8')
    masForHTML = []
    ratings = []

    all_users = db.get_all_users()
    all_users.sort(key=lambda x: x['allRating'], reverse=True)


    for i in all_users:
        ratings.append(i['allRating'])
    
    for user in all_users:

        rank = ratings.index(user['allRating']) + 1
        count = ratings.count(user['allRating'])
        rang1, rang2 = rank, rank + count - 1
        color = 'black'

        if user['platform'] == 'TG':
            color = 'rgb(35, 0, 149)'

        if rang1 == rang2:
            rang = str(rang1)
        else:
            rang = f"{rang1}-{rang2}"

        user_name = re.sub(r'[^–ê-—èA-z0-9() ]', '', user['name'])

        masForHTML.append([user_name, user['countArif'], user['ratingP'], user['ratingU'],
                            user['ratingC'], user['ratingM'], user['ratingF'],
                            user['allRating'], rang, color])

    file.write(template.render(my_array=masForHTML))

    file.close()

    users[id].send_document("–í —Ñ–∞–π–ª–µ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 'table.html')
    os.remove("table.html")


keyMain = telebot.types.ReplyKeyboardMarkup()
keyMain.resize_keyboard = True
keyMain.row('–ó–∞–¥–∞–Ω–∏—è', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

keyMainForAdmin = telebot.types.ReplyKeyboardMarkup()
keyMainForAdmin.resize_keyboard = True
keyMainForAdmin.row('–ó–∞–¥–∞–Ω–∏—è', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
keyMainForAdmin.row('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º')

keyMainForRed = telebot.types.ReplyKeyboardMarkup()
keyMainForRed.resize_keyboard = True
keyMainForRed.row('–ó–∞–¥–∞–Ω–∏—è', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
keyMainForRed.row('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ')

keyMain2 = telebot.types.ReplyKeyboardMarkup()
keyMain2.resize_keyboard = True
keyMain2.row('–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞', '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', '–£—Å–ª–æ–≤–∏—è')
keyMain2.row('–¶–∏–∫–ª—ã', '–ú–∞—Å—Å–∏–≤—ã', '–§—É–Ω–∫—Ü–∏–∏')
keyMain2.row('‚¨Ö –ù–∞–∑–∞–¥', "–¢–æ–ø üèÜ", '–¢–µ–æ—Ä–∏—è üìñ')

keyInf2 = telebot.types.ReplyKeyboardMarkup()
keyInf2.resize_keyboard = True
keyInf2.row('‚¨Ö –ù–∞–∑–∞–¥', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°')

keyAdmin = telebot.types.ReplyKeyboardMarkup()
keyAdmin.resize_keyboard = True
keyAdmin.row("–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–û–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
keyAdmin.row("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "–î–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π")
keyAdmin.row('‚¨Ö –ù–∞–∑–∞–¥')

keyMain1 = telebot.types.ReplyKeyboardMarkup()
keyMain1.resize_keyboard = True
keyMain1.one_time_keyboard = True
keyMain1.row('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', '–£—Å–ª–æ–≤–∏—è', '–¶–∏–∫–ª—ã')
keyMain1.row('–ú–∞—Å—Å–∏–≤—ã', '–§—É–Ω–∫—Ü–∏–∏', '–û—Ç–º–µ–Ω–∞')

keyVar = telebot.types.ReplyKeyboardMarkup()
keyVar.resize_keyboard = True
keyVar.row('–ù–µ—Ç', '–î–∞')

keyVar2 = telebot.types.ReplyKeyboardMarkup()
keyVar2.resize_keyboard = True
keyVar2.row('–û—Ç–º–µ–Ω–∞‚ùå', '–î–æ–±–∞–≤–∏—Ç—å‚úÖ')
keyVar2.row("‚¨Ö –ù–∞–∑–∞–¥")

keyBack = telebot.types.ReplyKeyboardMarkup()
keyBack.resize_keyboard = True
keyBack.row('‚¨Ö –ù–∞–∑–∞–¥')

keyBack2 = telebot.types.ReplyKeyboardMarkup()
keyBack2.resize_keyboard = True
keyBack2.row('–ß—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–µ–¥–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω?', '–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞?')
keyBack2.row('‚¨Ö –ù–∞–∑–∞–¥')

bot_start()

@bot.message_handler(commands=['start'])
def startMessage(event):
    add(event)

@bot.message_handler(content_types=['text'])
def get_message(event):
    global message_counter
    id = event.from_user.id

    message_counter += 1
    if message_counter >= 100:
        save_stats()
        message_counter = 0

    if id not in users:
        add(event)
    elif event.text in module_names and users[id].adminMode == -2:
        users[id].get_user_answer(event.text)
    elif event.text == "–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞" and users[id].solution_mode == -2:
        users[id].solution_mode = -1
        users[id].get_problem()
    elif event.text == "‚¨Ö –ù–∞–∑–∞–¥" or event.text == "–û—Ç–º–µ–Ω–∞":
        users[id].Stop()
    elif users[id].solution_mode != -2:
        users[id].get_user_answer(event.text)
    elif event.text == "–ó–∞–¥–∞–Ω–∏—è":
        users[id].send_message(
            "–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏.\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–µ–æ—Ä–∏–µ–π, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–¢–µ–æ—Ä–∏—è'",
            keyMain2)
    elif event.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        users[id].get_self_stats()
    elif event.text == "–¢–µ–æ—Ä–∏—è üìñ":
        users[id].get_theory()
    elif event.text == "–¢–æ–ø üèÜ":
        users[id].get_users_top()
    elif event.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        users[id].send_message(INFORMATION)
    else:
        if (id in TG_ADMINS or id in REDACTORS) and (event.text in admin_commands or users[id].adminMode != -1):
            admin_command(event.text, id, event)
        else:
            ans = "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            if id in TG_ADMINS:
                users[id].send_message(ans, keyMainForAdmin)
            elif id in REDACTORS:
                users[id].send_message(ans, keyMainForRed)
            else:
                users[id].send_message(ans, keyMain)

@bot.message_handler(content_types=['photo'])
def get_photo(event):
    id = event.from_user.id
    if (id in TG_ADMINS or id in REDACTORS) and users[id].adminMode == 1:
        admin_command(event.caption, id, event)
        return
    if id not in users:
        add(event)

@bot.message_handler(content_types=['sticker'])
def get_sticker(event):
    id = event.from_user.id
    if id not in users:
        add(event)

bot.infinity_polling()